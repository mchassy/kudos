variables:
  DOCKER_DRIVER: overlay
default:
  before_script:
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - echo "Gitlab Runner Stage $CI_JOB_STAGE"
  image:
    name: $DOCKER_URI/alpine-toolbox:latest
stages:
  - lint_code
  - lint_config
  - build_image
  - test_image
  - push_image

lint_code:
  stage: lint_code
  script:
    - echo "Linting python code"
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - python3 -m venv env
    - source ./env/bin/activate
    - pip3 install -r ./dev/requirements.txt
    - pylint --rcfile=./dev/.pylintrc ./app

lint_config:
  stage: lint_config
  script:
    - echo "Linting ansible configuration"
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - ansible-lint ./build/config.yml
  dependencies:
    - lint_code
build_image:
  stage: build_image
  script:
    - echo "Build image and push to dev repo - $DOCKER_URI."
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - cd build
    - packer build -machine-readable config.json > r1.txt
    - cat r1.txt | awk -F ',' -v pattern='docker':' Imported Docker image':' sha' '$0~pattern{print $0}' > r2.txt
    - cat r2.txt | awk -F ':' /image/'{print $3":"$4}' > r3.txt
    - BUILD_SIG=$(cat r3.txt | awk '{print $NF}')
    - echo "$BUILD_SIG" > BUILD_SIG
    - echo "BUILD_SIG is $BUILD_SIG"
    - aws s3 cp ./BUILD_SIG s3://mapu-signatures/kudos/BUILD_SIG
    - docker rmi $DOCKER_URI/kudos:latest
    - aws sns publish --region us-east-1 --topic-arn "$PL_ARN" --subject "Image Build Success Notification"
      --message "$DOCKER_URI image was successfully built in confrormance with enterprise standards.
      Signature - $BUILD_SIG"
  dependencies:
    - lint_config
test_image:
  stage: test_image
  # services:
  # - $DOCKER_URI/ab-webserver
  script:
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - echo "Testing web server (also validates pull from dev repo)."
    - docker pull $DOCKER_URI/kudos:latest
    - docker run -d -i --name test_container $DOCKER_URI/kudos:latest
    - sleep 3
    - docker ps
    - TEST_SIG=$(docker images --no-trunc | awk -v du="$DOCKER_URI\/kudos" '$0~du{print $3}')
    - echo "$TEST_SIG" > TEST_SIG
    - echo "TEST_SIG is $TEST_SIG"
    - aws s3 cp ./TEST_SIG s3://mapu-signatures/kudos/TEST_SIG
    - aws sns publish --region us-east-1 --topic-arn "$PL_ARN" --subject "Service Validation Success Notification"
      --message "Container $DOCKER_URI has passed all tests will be pushed to the Integration Repo
      Signature - $TEST_SIG"
    - echo "Remove Container and Image"
    - docker rm -f test_container
    - docker rmi $DOCKER_URI/kudos:latest
    - cat $VARIABLES_FILE
  dependencies:
    - build_image
push_image:
  stage: push_image
  script:
    - aws s3 cp s3://mapu-signatures/kudos/BUILD_SIG .
    - aws s3 cp s3://mapu-signatures/kudos/TEST_SIG .
    - BUILD_SIG=$(cat BUILD_SIG)
    - TEST_SIG=$(cat TEST_SIG)
    - echo "BUILD_SIG is $BUILD_SIG"
    - echo "TEST_SIG is $TEST_SIG"
    - if [[ "$IMAGE_SIG" == "$TEST_SIG" ]]; then
      aws sns publish --region us-east-1 --topic-arn "$PL_ARN" --subject "Image Signature Validation Notification"
      --message "The signature of the image created by the factory matches the signature of the image which
      was just tested (factory image signature $IMAGE_SIG == test image signature $TEST_SIG).
      This container will be pushed to the integration repo and is ready to deploy.";
      echo "Pushing web server to repo";
      else
      aws sns publish --region us-east-1 --topic-arn "$PL_ARN" --subject "FAILURE!!! -- Image Signature Validation Notification"
      --message "The signature of the image created by the factory does not the signature of the image which
      was just tested (factory image signature  $IMAGE_SIG != test image signature $TEST_SIG).
      This container will not be pushed to the integration.";
      echo "Error matching signatures";
      fi
  dependencies:
    - test_image
